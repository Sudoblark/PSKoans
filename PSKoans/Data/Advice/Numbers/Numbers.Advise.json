{
    "Title": "Numbers",
    "Content": [
        "In PowerShell, we can use many different data types to represent numbers. All differ slightly in what they can and can't do. The two most common ones are:",
        "\n",
        "\tIntergers (INT)",
        "\t\tRepresent whole numbers. This is the default numeric data type that PowerShell uses",
        "\n",
        "\tDoubles",
        "\t\tRepresents numbers with decimal places",
        "\n",
        "So 10 will be an integer and 10.0 will be a double. Why does this matter? If you perform any operation with a double, then the result of that will be a double:",
        "\n",
        "\tPS C:\\Users\\Administrator\\Documents\\GitHub\\Dev\\PSKoans> 10 * 10.0",
        "\t\t100",
        "\tPS C:\\Users\\Administrator\\Documents\\GitHub\\Dev\\PSKoans> 10 * 10.0 | Get-Member",
        "\n",
        "\n",
        "\tTypeName: System.Double",
        "\n",
        "Say we're performing a very specific calculation. Lets say Pi. We'be worked out a portion of Pi being equal to 3.14159265358979, what happens if we pass this value into a function that excepts an integer as input?",
        "\n",
        "\tPS C:\\Users\\Administrator\\Documents\\GitHub\\Dev\\PSKoans> function HelloWorld([int32]$Int) {$Int}",
        "\tPS C:\\Users\\Administrator\\Documents\\GitHub\\Dev\\PSKoans> $Pi = 3.14159265358979",
        "\tPS C:\\Users\\Administrator\\Documents\\GitHub\\Dev\\PSKoans> HelloWorld -Int $Pi",
        "\t3",
        "\n",
        "Our number is rounded to the nearest integer, and suddenly whatever calculation we're performing is a little less accurate."
    ]
}
