{
    "Title": "Object-Orientated Programming (OOP) Introduction",
    "Content": [

        "PowerShell is object-orientated, but what does this mean? Everything is an object! ",
        "\n",
        "Objects are a way for us to build programs to scale, and OOP is standard in software development. For the purposes of this advise file there's only three fundamentals you need to know:",
        "\n",
        "\tObjects are blueprints",
        "\tObjects have properties",
        "\tObjects have methods",
        "\n",
        "If you've already done the Get-Member Koan then you'll know we can use this cmdlet to discover what blueprint an item is using, what properties it has and what methods it may execute. For example we may take any string and pass it through into Get-Member in order to get the below result:",
        "\n",
        "\t\tTypeName: System.String",
        "\n",
        "\tName             MemberType            Definition",
        "\t----             ----------            ----------",
        "\tClone            Method                System.Object Clone(), System.Object ICloneable.Clone()",
        "\tLength           Property              int Length {get;}",
        "\n",
        "The above tells us we have a method named 'Clone' and a property named 'Length'. It also tells us that this object is of the type 'System.String'. This refers to what where, and what, blueprint - or object type - this instance of an object is. As PowerShell uses .NET for translation into machine code, you can search for further information on these object types on TechNet:",
        "\n",
        "\thttps://docs.microsoft.com/en-us/dotnet/api/system.string?view=netframework-4.8",
        "\n",
        "For third parties they should include class documentation within their respective modules and libraries.",
        "\n",
        "This is great and all but what does it mean? In this instance system.string is the class; it contains definitions for different properties and methods. An 'instance' of this class may be created, and if it is then we'll know exactly what properties and methods this instance may have. The actual values may change, but at an abstract level we know what to expect.",
        "\n",
        "For example, think of a kettle. The object will be called 'Kettle'. If we think about it, all kettles should have some common properties:",
        "\n",
        "\t Does it have a lid?",
        "\t What colour is it?",
        "\t What material is it made from?",
        "\n",
        "All kettles might have a lid, all have a colour and all be made from something. These are our properties. All kettles should also be able to do the following things:",
        "\n",
        "\tBoil Water",
        "\tAttempt to open the lid",
        "\tAttempt to close the lid",
        "\n",
        "These 'doing things' we can think of as our methods. These properties and methods together make our object. Kettles come in all different shapes and sizes, but funamentally every single one will have the above properites and methods. The differences come when we create something from this blueprint, or an 'instance' of the object. We can have blue kettles, black kettles, kettles without lids, kettles with lids, kettles made from plastic or stainless steel",
        "\n",
        "For more information on OOP please see the following third-party link below:",
        "\n",
        "\thttps://www.freecodecamp.org/news/object-oriented-programming-concepts-21bb035f7260/"
    ]

}